package com.wanshare.wscomponent.chart.kline.model;

import com.google.gson.Gson;
import com.wanshare.wscomponent.chart.kline.model.bean.HisData;

import org.junit.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * 算法单元测试
 * </br>
 * Date: 2018/8/28 15:25
 *
 * @author hemin
 */
public class KDJTest {
    private static final int DEF_DIV_SCALE = 10;
    @Test
    public void testKdj() throws Exception{

        String dataStr = "[[\"32500000\",\"32880000\",\"31570000\",\"31570000\",\"4108508697966\",\"1534836600\"],[\"31570000\",\"32400000\",\"30350000\",\"31160000\",\"1540475093256\",\"1534838400\"],[\"31160000\",\"32300000\",\"31160000\",\"32000000\",\"668264955383\",\"1534840200\"],[\"32000000\",\"33490000\",\"32000000\",\"33450000\",\"338093627660\",\"1534842000\"],[\"33450000\",\"33490000\",\"33400000\",\"33430000\",\"572240028431\",\"1534843800\"],[\"33430000\",\"33480000\",\"32270000\",\"33000000\",\"312984978761\",\"1534845600\"],[\"33000000\",\"33480000\",\"33000000\",\"33480000\",\"134074246780\",\"1534847400\"],[\"33480000\",\"33480000\",\"33040000\",\"33430000\",\"103046403375\",\"1534849200\"],[\"33430000\",\"33430000\",\"33430000\",\"33430000\",\"2880121534\",\"1534851000\"],[\"33430000\",\"33450000\",\"33000000\",\"33450000\",\"332485439028\",\"1534852800\"],[\"33450000\",\"33450000\",\"33000000\",\"33430000\",\"514893863579\",\"1534854600\"],[\"33430000\",\"33440000\",\"33430000\",\"33430000\",\"283088434632\",\"1534856400\"],[\"33430000\",\"33430000\",\"32300000\",\"32300000\",\"344767419632\",\"1534858200\"],[\"32300000\",\"33440000\",\"32290000\",\"32800000\",\"475462616734\",\"1534860000\"],[\"32800000\",\"33320000\",\"32280000\",\"33320000\",\"194227256961\",\"1534861800\"],[\"33320000\",\"33320000\",\"33320000\",\"33320000\",\"24656800000\",\"1534863600\"],[\"33320000\",\"33320000\",\"32270000\",\"33300000\",\"137562527712\",\"1534865400\"],[\"33300000\",\"33300000\",\"33290000\",\"33300000\",\"166690459330\",\"1534867200\"],[\"33300000\",\"33300000\",\"33300000\",\"33300000\",\"41886744660\",\"1534869000\"],[\"33300000\",\"33300000\",\"33190000\",\"33190000\",\"94142040280\",\"1534870800\"],[\"33190000\",\"33190000\",\"32280000\",\"32280000\",\"5768436\",\"1534874400\"],[\"32280000\",\"33190000\",\"32280000\",\"33190000\",\"66380000000\",\"1534878000\"],[\"33190000\",\"33190000\",\"33000000\",\"33000000\",\"4926900\",\"1534888800\"],[\"33000000\",\"33000000\",\"32500000\",\"32500000\",\"49166227500\",\"1534890600\"],[\"32500000\",\"32500000\",\"32500000\",\"32500000\",\"22744185750\",\"1534894200\"],[\"32500000\",\"33000000\",\"32500000\",\"33000000\",\"24283741857203\",\"1534896000\"],[\"33000000\",\"33300000\",\"32280000\",\"33300000\",\"343630576215\",\"1534897800\"],[\"33300000\",\"33300000\",\"32780000\",\"32780000\",\"11071518518984\",\"1534899600\"],[\"32780000\",\"32850000\",\"32780000\",\"32850000\",\"23795231161016\",\"1534901400\"],[\"32850000\",\"33260000\",\"32270000\",\"33240000\",\"354480579404\",\"1534903200\"],[\"33240000\",\"33240000\",\"32330000\",\"33000000\",\"12869534190218\",\"1534905000\"],[\"33000000\",\"33140000\",\"32330000\",\"32500000\",\"1528730072106\",\"1534906800\"],[\"32500000\",\"32500000\",\"32330000\",\"32330000\",\"255179184636\",\"1534908600\"],[\"32330000\",\"32400000\",\"32000000\",\"32000000\",\"906958517553\",\"1534910400\"],[\"32000000\",\"32500000\",\"31200000\",\"31250000\",\"510391963670\",\"1534912200\"],[\"31250000\",\"32450000\",\"31250000\",\"32400000\",\"213487888213\",\"1534914000\"],[\"32400000\",\"32400000\",\"31450000\",\"32100000\",\"147058955350\",\"1534915800\"],[\"32100000\",\"32450000\",\"31250000\",\"31260000\",\"1395330019246\",\"1534917600\"],[\"31260000\",\"32050000\",\"31260000\",\"31260000\",\"115528819242\",\"1534919400\"],[\"31260000\",\"31260000\",\"30630000\",\"31230000\",\"1091730459229\",\"1534921200\"]]";

        List<List<String>> datas = new Gson().fromJson(dataStr,List.class );
        List<HisData> hisDatas = new ArrayList<>();

        HisData data = null;
        for (List<String> itemArr : datas) {
            try {
                String open = itemArr.get(0);
                String high = itemArr.get(1);
                String low = itemArr.get(2);
                String close = itemArr.get(3);
                String vol = itemArr.get(4);
                String time = itemArr.get(5);

                data = new HisData();
                data.setOpen(Double.parseDouble(div(open, "100000000")));
                data.setHigh(Double.parseDouble(div(high, "100000000")));
                data.setLow(Double.parseDouble(div(low, "100000000")));
                data.setClose(Double.parseDouble(div(close, "100000000")));
                data.setVol(Double.parseDouble(div(vol, "100000000")));
                data.setDate(Long.parseLong(time)*1000);

                hisDatas.add(data);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        new KLineQuotaModel().initData(hisDatas);
        System.out.println("end");
    }

    private String div(String v1, String v2) {
        return div(v1, v2, DEF_DIV_SCALE);
    }

    public static String div(String v1, String v2, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException(
                    "The scale must be a positive integer or zero");
        }
        try {
            BigDecimal b1 = new BigDecimal(v1);
            BigDecimal b2 = new BigDecimal(v2);
            return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();
        }catch (Exception e){
            return "0";
        }
    }


}